package com.au.credpro.report.service;

import java.util.List;
import java.util.Map;

import javax.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.au.credpro.report.entity.QueryList;
import com.au.credpro.report.repository.QueryListRepository;

@Service
public class QueryExecutionService {

    @Autowired
    private QueryListRepository queryListRepository;

    // Assuming you have a method to connect to database1 and execute the given query
    // Replace this method with the actual logic to connect to database1 and execute the query
    private List<Map<String, Object>> executeQueryOnDatabase1(String query) {
        // Implement the logic to connect to database1 and execute the query
        // Return the result as a List<Map<String, Object>> where each map represents a row of data
        // with column names as keys and corresponding values
        // You can use JDBC, JPA, or any other database access method to interact with database1
        // For simplicity, let's assume you have implemented this method
        // and the return type is List<Map<String, Object>>
        return null;
    }

    public List<Map<String, Object>> executeAssignedQuery(Long userId, Long queryId) {
        QueryList queryList = queryListRepository.findById(queryId)
                .orElseThrow(() -> new EntityNotFoundException("Query not found"));

        // Check if the user is assigned to this query
//        if (queryList.getUser().stream().noneMatch(user -> user.getUserId().equals(userId))) {
//            throw new UnauthorizedException("You are not authorized to execute this query.");
//        }

        String query = queryList.getQuery();
        return executeQueryOnDatabase1(query);
    }
}

