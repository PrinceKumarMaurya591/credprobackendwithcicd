package com.au.credpro.report.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityNotFoundException;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.au.credpro.report.entity.QueryList;
import com.au.credpro.report.entity.User;
import com.au.credpro.report.exception.UnauthorizedException;
import com.au.credpro.report.repository.QueryListRepository;
import com.au.credpro.report.repository.UserRepository;

import org.apache.poi.ss.usermodel.*;


@Service
public class QueryExecutionService {

    @Autowired
    private QueryListRepository queryListRepository;
    
    @Autowired UserRepository userRepository;

    private static final String DB_URL = "jdbc:mysql://localhost:3306/credproreportdata";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "root";

    
    // Assuming you have a method to connect to database1 and execute the given query
    // Replace this method with the actual logic to connect to database1 and execute the query
    private List<Map<String, Object>> executeQueryOnDatabase1(String query) {
        // Implement the logic to connect to database1 and execute the query
        // Return the result as a List<Map<String, Object>> where each map represents a row of data
        // with column names as keys and corresponding values
        // You can use JDBC, JPA, or any other database access method to interact with database1
        // For simplicity, let's assume you have implemented this method
        // and the return type is List<Map<String, Object>>
    	List<Map<String, Object>> resultList = new ArrayList<>();
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        		 
        		
        		Statement statement = connection.createStatement();
                ResultSet resultSet = statement.executeQuery(query)) {

               int columnCount = resultSet.getMetaData().getColumnCount();

               while (resultSet.next()) {
                   Map<String, Object> row = new HashMap<>();
                   for (int i = 1; i <= columnCount; i++) {
                       String columnName = resultSet.getMetaData().getColumnName(i);
                       Object columnValue = resultSet.getObject(i);
                       row.put(columnName, columnValue);
                   }
                   resultList.add(row);
               }
           } catch (SQLException e) {
               e.printStackTrace();
               // You can handle the exception as required, such as logging or throwing a custom exception
           }
    	
        return resultList;
    }
    
    
    
    
    public Workbook executeQueryOnDatabase1AndGetExcel(String query) {
        List<Map<String, Object>> resultList = executeQueryOnDatabase1(query);

        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("QueryResult");
        Row headerRow = sheet.createRow(0);

        // Create headers based on column names
        int columnIdx = 0;
        for (String columnName : resultList.get(0).keySet()) {
            Cell cell = headerRow.createCell(columnIdx);
            cell.setCellValue(columnName);
            columnIdx++;
        }
        
        int rowIndex = 1;
        for (Map<String, Object> rowMap : resultList) {
            Row dataRow = sheet.createRow(rowIndex);
            int columnIndex = 0;
            for (Object cellValue : rowMap.values()) {
                Cell cell = dataRow.createCell(columnIndex);
                if (cellValue instanceof Number) {
                    cell.setCellValue(((Number) cellValue).doubleValue());
                } else if (cellValue instanceof String) {
                    cell.setCellValue((String) cellValue);
                } else if (cellValue instanceof Boolean) {
                    cell.setCellValue((Boolean) cellValue);
                } else if (cellValue instanceof java.util.Date) {
                    cell.setCellValue((java.util.Date) cellValue);
                } else {
                    cell.setCellValue(cellValue.toString());
                }
                columnIndex++;
            }
            rowIndex++;
        }

        return workbook;
    }
    
    
    
   
    
  
    

//    public List<Map<String, Object>> executeAssignedQuery(Long userId, Long queryId) {
//        QueryList queryList = queryListRepository.findById(queryId)
//                .orElseThrow(() -> new EntityNotFoundException("Query not found"));
//
//        // Check if the user is assigned to this query
////        if (queryList.getUser().stream().noneMatch(user -> user.getUserId().equals(userId))) {
////            throw new UnauthorizedException("You are not authorized to execute this query.");
////        }
//
//        String query = queryList.getQuery();
//        return executeQueryOnDatabase1(query);
//    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
//    public Workbook executeAssignedQueryAndGetExcel(Long userId, Long queryId) {
//        QueryList queryList = queryListRepository.findById(queryId)
//                .orElseThrow(() -> new EntityNotFoundException("Query not found"));
//
////        // Check if the user is assigned to this query
////        if (queryList.getUser().stream().noneMatch(user -> user.getUserId().equals(userId))) {
////            throw new UnauthorizedException("You are not authorized to execute this query.");
////        }
//
//        String query = queryList.getQuery();
//        return executeQueryOnDatabase1AndGetExcel(query);
//    }
//}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  public Workbook executeAssignedQueryAndGetExcel(Long userId, Long queryId) throws UnauthorizedException {
  QueryList queryList = queryListRepository.findById(queryId)
          .orElseThrow(() -> new EntityNotFoundException("Query not found"));

  // Check if the user is assigned to this query
  if (queryList.getUser().stream().noneMatch(user -> user.getUserId().equals(userId))) {
      throw new UnauthorizedException("You are not authorized to execute this query.");
  }

  String query = queryList.getQuery();
  return executeQueryOnDatabase1AndGetExcel(query);
}
}