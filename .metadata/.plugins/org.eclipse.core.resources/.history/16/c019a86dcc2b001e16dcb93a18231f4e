package com.au.credpro.report.controller;

import java.util.List;
import java.util.Set;

import javax.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.au.credpro.report.entity.User;
import com.au.credpro.report.repository.AdminRepository;
import com.au.credpro.report.service.AdminService;
import com.au.credpro.report.service.UserService;

@RestController
@RequestMapping("/admin")
public class AdminController {

	@Autowired
	AdminService adminService;
	
	@Autowired
    private UserService userService;
	
	@Autowired 
	private AdminRepository adminRepository;
	
	
	
	 @PostMapping("/{adminId}/add-user")
	 public ResponseEntity<User> addUserByAdmin(@PathVariable Long adminId,@RequestBody User user) {
	      
	       User newUser= adminService.addUserByAdmin(adminId, user);
	        return ResponseEntity.status(HttpStatus.CREATED).body(newUser);
	    }
	
	
//	 @PostMapping("/{adminId}/add-user")
//	    public ResponseEntity<User> addUserByAdmin(@PathVariable Long adminId, @RequestBody User user) {
//	        User newUser = adminService.addUserByAdmin(adminId, user);
//	        return ResponseEntity.status(HttpStatus.CREATED).body(newUser);
//	    }
//	
	 
	 
	 
	 
	 @PostMapping("/{userId}/assign-queries")
	    public ResponseEntity<User> assignQueriesToUser(
	            @PathVariable Long userId,
	            @RequestBody Set<Long> queryIds) {
		 
		 // Set<Long> queryIds1 = queryIdsWrapper.getQueryIds();
	        User user = adminService.assignQueriesToUser(userId, queryIds);
	        return ResponseEntity.ok(user);
		 
//	        User user = adminService.assignQueriesToUser(userId, queryIds);
//	        return ResponseEntity.ok(user);
	        
     }
	        
	    }
	 
	 

